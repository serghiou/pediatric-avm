---
title: "Data preparation - Patients"
author: "Stylianos Serghiou"
date: "`r format(Sys.time(), '%m/%d/%Y')`"
params:
  PROPORTION_OF_SUBJECTS: 1
  DATA_SOURCE: "s3"  # local, s3
  DST_DIRNAME: "patients"
  MIN_HOURS_LEAD_ON: 7.5  # minimum acceptable hours lead was each day
  MAX_DAYS: 15
output:
  prettydoc::html_pretty:
    # no code_folding available
    theme: hpstr      # or: architect; https://github.com/yixuan/prettydoc
    highlight: github # or: vignette
    toc: TRUE         # no toc_float available
    df_print: kable   # obviates %>% kable; does not replace styling though
  tufte::tufte_handout: default
  pdf_document:
    highlight: tango
    df_print: kable
    latex_engine: pdflatex
    keep_tex: yes
editor_options: 
  chunk_output_type: inline
---

```{=html}
<style>
p {

text-align: justify;
text-justify: interword;
padding: 0 0 0.5em 0

}
</style>
```
```{r setup, include=FALSE}
# Load packages
library(knitr)
library(kableExtra)
library(ggplot2)
library(magrittr)



######### knitr

# Define chunk options
opts_chunk$set(
  echo = TRUE,
  cache = FALSE, # if TRUE, no need to rerun chunks
  # cache.lazy = TRUE,  # use with big objects (>1 GB)
  cache.comments = FALSE, # do not rebuild if comments change
  tidy = FALSE, # can play with this
  warning = FALSE,
  message = FALSE,
  comment = NA,
  fig.align = "center",
  fig.width = 7,
  fig.path = "Figs/", # export all figures to dir Figs
  linewidth = 91,
  width = 75
)


# Initiatialize hook
hook_output <- knit_hooks$get("output")


# Hook to wrap output text when it exceeds 'n' using linewidth
knit_hooks$set(output = function(x, options) {
  if (!is.null(n <- options$linewidth)) {
    x <- knitr:::split_lines(x)

    # wrap lines wider than 'n'
    if (any(nchar(x) > n)) {
      x <- strwrap(x, width = n)
    }
    x <- paste(x, collapse = "\n")
  }
  hook_output(x, options)
})


# Times a chunk and prints the time it took to run it under the chunk
# To time a chunk, include in the chunk options: {r my_chunk, timeit=TRUE}
knitr::knit_hooks$set(timeit = local({
  now <- NULL
  function(before, options) {
    if (before) {
      now <<- Sys.time()
    } else {
      res <- difftime(Sys.time(), now)
      now <<- NULL
      # use options$label if you want the chunk label as well
      paste("Time for this code chunk:", as.character(res))
    }
  }
}))


# For more knitr options visit: https://yihui.name/knitr/options/
# and his github page: https://github.com/yihui/knitr-examples



######### kableExtra

options(
  knitr.kable.NA = "" # replace NAs in tables with blank
  , digits = 3
) # round digits (doesn't work without this here!)

## Example use
# data.frame(x = c(1,2,3), y = c(4,5,6), z = c(7,8,9)) %>%
#   kable(booktabs = T) %>% kable_styling()

# Function to simplify table styling
sable <- function(tab, escape = T, full_width = F, drop = F, font_size = 12) {
  if (drop) {
    tab %>%
      kable(escape = escape, booktabs = TRUE) %>%
      collapse_rows(valign = "top") %>%
      kable_styling("striped",
        position = "center",
        full_width = full_width,
        font_size = font_size
      )
  } else {
    tab %>%
      kable(escape = escape, booktabs = TRUE) %>%
      kable_styling("striped",
        position = "center",
        full_width = full_width,
        font_size = font_size
      )
  }
}

## Guidelines
# No longer need to define options(knitr.table.format = "html"). It is now automatically done as soon as you load kableExtra
# No need to run kable() every time - done automatically as soon as you load kableExtra
# Loading kableExtra nullifies any styling applied by df_table: kable in the preamble - if you are content with standard formatting, DO NOT load kableExtra



#########  ggplot2

# Set up preferred theme in ggplot2
my_theme <-
  # this and theme_minimal() are my favorite
  theme_light() +
  theme(
    axis.ticks = element_blank(),
    axis.title = element_text(face = "bold"),
    axis.title.x = element_text(margin = margin(t = 15)),
    axis.title.y = element_text(margin = margin(r = 7)),
    legend.key = element_rect(colour = NA, fill = NA), # Avoid borders
    panel.border = element_blank(),
    text = element_text(color = "grey20"),
    title = element_text(face = "bold")
  )

# Make the above theme the default theme
original_theme <- theme_set(my_theme)

# Use ggsave to save plots after plotting - this reduces size dramatically




######### Tabbed sections

# You can organize content using tabs by applying the .tabset class attribute to headers within a document. This will cause all sub-headers of the header with the .tabset attribute to appear within tabs rather than as standalone sections. For example:

## Quarterly Results {.tabset}

### By Product



######### Update package

# To update the package use:
# Replace ~/serghiouTemplates/inst/rmarkdown/templates/report/skeleton.rmd
# library(devtools); setwd("/Users/Stelios/"); install("serghiouTemplates")
```

# Setup {.tabset}

## Run

Open file in terminal to inherit AWS credentials.

``` bash
open pediatric-avm.rproj
```

## Imports

```{r}
# Load packages
library(magrittr)
library(tidyverse)

# Source functions
```

## Configurations

```{r}
# Paths
filepath <- "../../data/1_raw/patients_2024-06-14_add-eligibility-column.xlsx"

# Locations
DST_DIRNAME_DATA <- "../../data/3_tidy/"
```

```{r}
UPDATE_DOCKERFILE <- FALSE
```

------------------------------------------------------------------------

# Read data

```{r}
patients_ <- readxl::read_excel(filepath, sheet = 1)
```

------------------------------------------------------------------------

# Conform schema

## Setup

Create conformed object.

```{r}
patients <- patients_
```

Glimpse.

```{r}
glimpse(patients)
```

## Rows

Remove empty rows.

```{r}
patients <- patients %>% filter_all(any_vars(!is.na(.) & . != ""))
```

## Columns

All column names to lower.

```{r}
names(patients) <- tolower(names(patients))
```

Drop unwanted columns.

```{r}
# Columns to drop
drop_columns <- c(
  "comment",
  # "mrn",
  "first name",
  "last name",
  "dob",
  "...64",
  "dvd score...25"
)

# Drop
patients <- patients %>% select(-any_of(drop_columns))
```

Reformat column names.

```{r}
# Reformat
colnames(patients) <-
  patients %>%
  colnames() %>%
  # Remove all punctuation
  str_replace_all("[[:punct:]&&[^_]]", "") %>%
  # Remove leading and trailing spaces
  trimws() %>%
  # Replace spaces with underscores
  str_replace_all(" ", "_")

# Print
colnames(patients)
```

Rename columns.

```{r}
# Columns to be renamed
new_old <- c(
  patient_id = "avm_no",
  sex = "gender",
  age_at_first_treatment_yrs = "age_at_first_treatment",
  location = "location_relabelled_brainstem_thalamus_basal_ganglia=deep_hemispheric=c_cerebellar",
  location_free_text = "location_free_text",
  dvd_score = "dvd_score16",
  spetzler_martin_grade = "sm",
  is_diffuse_nidus = "diffuse_nidus",
  has_bled = "bled",
  lawton_young_age_score = "ly_age_score",
  lawton_young_grade = "ly_grade",
  has_associated_aneurysm = "associated_aneurysm_yesno",
  venous_drainage = "venous",
  is_incidental = "incidental",
  has_hemorrhage = "hemorrhage",
  has_seizures = "seizures",
  has_steal = "steal",
  has_ha = "ha",
  has_deficit = "deficit",
  has_paresis = "paresis",
  num_embolizations = "embos",
  age_at_1st_embolization_yrs = "age_at_1st_embo",
  num_xrt = "xrt",
  age_at_1st_xrt_yrs = "age_at_1st_xrt",
  num_surgeries = "number_of_surgeries",
  age_at_1st_dos_yrs = "age_at_1st_dos",
  first_procedure = "first_procedure_yr_0",
  last_procedure = "final_procedure",
  procedure_combinations = "combinations",
  is_multimodal_treatment = "multimodality_treatment",
  date_first_treatment = "date_of_first_treatment",
  has_complication_major = "complication_major",
  has_complication_minor = "complications_minor",
  complication_secondary_to = "complication_secondary_to",
  complication_free_text = "complications_free_text",
  # Commonly known as mRS - the higher, the worse the outcome
  modified_rankin_score_presentation = "mrs_presentation",
  modified_rankin_score_pretreatment = "mrs_pretreatment",
  modified_rankin_score_postop_within_1_week = "mrs_postop_within_1_week",
  # The most recent mRS available
  modified_rankin_score_final = "final_mrs",
  change_in_mrs_tx_vs_final =
    "change_in_mrs_tx_vs_final_0_stable_1_improved_2_decline",
  is_obliterated = "obliterated",
  is_optimal_outcome = "optimal_outcome",
  is_good_outcome = "good_outcome",
  is_decline_mrs_tx_vs_postop = "decline_mrs_tx_vs_postop",
  is_death = "death",
  is_recurrence = "recurrence",
  is_hemorrhage_due_to_recurrence = "hemorrhage_due_to_recurrence",
  is_rebleed = "rebleed",
  is_2nd_rebleed = "2nd_rebleed",
  is_1st_bleed_after_treatment = "1st_bleed_after_treatment",
  is_rebleed_after_treatment = "rebleed_after_treatment",
  is_bleed_after_embolization = "bleed_after_embo",
  new_deficits_post_embolization = "new_deficits_postembo",
  is_bleed_after_radiation = "bleed_after_rad",
  new_deficits_post_srs = "new_deficits_postsrs",
  is_bleed_post_surgery = "bleed_after_surg",
  new_deficits_post_surgery = "new_deficits_postsurgery",
  time_from_treatment_to_bleed_yrs = "time_from_treatment_to_bleed"
)

# Rename
patients <- patients %>% rename(new_old)
```

------------------------------------------------------------------------

# Conform values

Reformat column values.

## Generate summary

Generate summary to identify data issues.

```{r}
# Rename dataframe
`Pediatric AVMs` <-
  patients %>%
  filter(is_eligible) %>%
  select(-is_eligible)

# Create summary
`Pediatric AVMs` %>%
  summarytools::dfSummary(display.labels = FALSE) %>%
  print(
    file = "../../outputs/descriptive-statistics/descriptive_statistics_before.html",
    footnote = NA
  )

# Remove unwanted dataframe
remove(`Pediatric AVMs`)
```

## Fix typos

Fix spelling errors.

```{r}
patients <-
  patients %>%
  # Remove leading and trailing white space
  mutate(across(where(is.character), trimws)) %>%
  # Remove superfluous spaces
  mutate(across(where(is.character), ~ str_replace(., "\\s+", " "))) %>%
  # Fix spelling errors
  mutate(across(where(is.character), ~ str_replace(., "^Uknown$", "Unknown"))) %>%
  # Fix inconsistencies
  mutate(across(where(is.character), ~ str_replace(., "^unknown$", "Unknown")))
```

## Reformat missing variables

Turn Unknown and N/A into missing.

```{r}
# Select cols
cols <- c(
  "side",
  "location",
  "size_score",
  "eloquence_score",
  "dvd_score",
  "spetzler_martin_grade",
  "lawton_young_grade",
  "supply",
  "venous_drainage"
)

# Apply transformation
patients <-
  patients %>%
  mutate(across(cols, ~ na_if(., "Unknown"))) %>%
  mutate(across(where(is.character), ~ na_if(., "N/A")))
```

## Reformat characters

Capitalize the first letter of the first word.

```{r}
# Function to capitalize the first letter of the first word in a string
capitalize_first_letter <- function(x) {
  if (!is.na(x)) {
    str_to_upper(substr(x, 1, 1)) %>% paste0(substr(x, 2, nchar(x)))
  } else {
    x
  }
}

# Vectorize the function to apply it element-wise
capitalize_first_letter_vec <- Vectorize(capitalize_first_letter)

# Apply the function across all character columns in the data frame
patients <-
  patients %>%
  mutate(across(where(is.character), capitalize_first_letter_vec))
```

Special cases.

```{r}
patients <-
  patients %>%
  mutate(
    feeders_free_text = recode(
      feeders_free_text,
      "ACA, MCA" = "MCA, ACA",
      "PCA, MCA" = "MCA, PCA",
      "ACA, MCA, PCA" = "MCA, ACA, PCA"
    ),
    procedure_combinations = recode(
      procedure_combinations,
      "ESR" = "ERS",
      "RE" = "ER",
      "SE" = "ES",
      "SR" = "RS"
    ),
    complication_secondary_to = recode(
      procedure_combinations,
      "ESR" = "ERS",
      "RE" = "ER",
      "SE" = "ES",
      "SR" = "RS"
    ),
    patient_id = sprintf("%04d", patient_id)
  )
```

## Reformat dates

Reformat all dates.

```{r}
patients <-
  patients %>%
  mutate(across(contains("date_"), ~ as.Date(., format = "%m/%d/%Y")))
```

## Reformat factors

Reformat into unordered factors.

```{r}
# Select columns
cols <- c(
  "patient_id",
  "sex",
  "side",
  "location",
  "supply",
  "venous_drainage"
)

# Apply transformation
patients <-
  patients %>%
  mutate(across(cols, as_factor))
```

Reformat into ordered factors.

```{r}
# Select columns
cols <- c(
  "size_score",
  "eloquence_score",
  "dvd_score",
  "spetzler_martin_grade",
  "lawton_young_age_score",
  "lawton_young_grade",
  "modified_rankin_score_presentation",
  "modified_rankin_score_pretreatment",
  "modified_rankin_score_postop_within_1_week",
  "modified_rankin_score_final"
)

# Apply transformation
patients <-
  patients %>%
  mutate(across(cols, ~ factor(., levels = sort(unique(.)), ordered = TRUE)))
```

In `change_in_mrs_tx_vs_final` recode numbers.

```{r}
patients <-
  patients %>%
  mutate(change_in_mrs_tx_vs_final = case_match(
    change_in_mrs_tx_vs_final,
    0 ~ "stable",
    1 ~ "improved",
    2 ~ "declined"
  ))
```

## Reformat numbers

```{r}
# Select columns
cols <- c(
  "max_size_cm",
  "interval_between_bleeds_yrs"
)

# Apply transformation
patients <-
  patients %>%
  mutate(across(cols, as.numeric))
```

Special cases.

```{r}
# Columns
cols <- c(
  "interval_between_1st_treatment_and_bleedrebleed_yrs",
  "time_from_treatment_to_bleed_yrs"
)

# Reformat
patients <-
  patients %>%
  mutate(across(cols, ~ str_replace(., "[\\sa-zA-Z]", ""))) %>%
  mutate(across(cols, as.numeric))
```

## Reformat boolean

Format appropriately.

```{r}
# Columns
cols <- c(
  "is_diffuse_nidus",
  "has_bled",
  "has_associated_aneurysm",
  "is_incidental",
  "has_hemorrhage",
  "is_multimodal_treatment",
  "has_complication_major",
  "has_complication_minor",
  "is_decline_mrs_tx_vs_postop",
  "is_death",
  "is_recurrence",
  "is_hemorrhage_due_to_recurrence",
  "is_rebleed",
  "is_2nd_rebleed",
  "is_bleed_after_embolization",
  "is_bleed_after_radiation",
  "is_bleed_post_surgery"
)

# Reformat
patients <-
  patients %>%
  mutate(across(cols, ~ case_when(
    . == "No" ~ FALSE,
    . == "Yes" ~ TRUE,
    . == "N" ~ FALSE,
    . == "Y" ~ TRUE,
    . == "0" ~ FALSE,
    . == "1" ~ TRUE,
    . == 1 ~ TRUE,
    . == 0 ~ FALSE,
    .default = NA
  )))
```

If missing in the following columns, assume false.

```{r}
# Columns
cols <- c(
  "is_incidental",
  "has_hemorrhage",
  "is_multimodal_treatment",
  "is_hemorrhage_due_to_recurrence",
  "is_rebleed",
  "is_2nd_rebleed",
  "is_bleed_after_embolization",
  "is_bleed_after_radiation",
  "is_bleed_post_surgery"
)

# Reformat
patients <-
  patients %>%
  mutate(across(cols, ~ ifelse(is.na(.), FALSE, .)))
```

Special cases.

```{r}
# Columns
cols <- c(
  "is_obliterated",
  "is_optimal_outcome",
  "is_good_outcome",
  "is_rebleed_after_treatment"
)

# Reformat
patients <-
  patients %>%
  mutate(
    across(cols, ~ ifelse(. == "Y", TRUE, FALSE)),
    is_1st_bleed_after_treatment = case_when(
      is_1st_bleed_after_treatment == 0 ~ FALSE,
      is_1st_bleed_after_treatment == 1 ~ TRUE,
      !is.na(is_1st_bleed_after_treatment) ~ TRUE,
      is.na(is_1st_bleed_after_treatment) ~ FALSE
    )
  )
```


```{r}
# Columns
cols <- c(
  "is_1st_bleed_after_treatment"
)

# Reformat
patients <-
  patients %>%
  mutate(
    across(cols, ~ case_when(
      . == 0 ~ FALSE,
      . == 1 ~ TRUE,
      !is.na(.) ~ TRUE,
      is.na(.) ~ FALSE
    ))
  )
```

```{r}
# Columns
cols <- c(
  "has_seizures",
  "has_steal",
  "has_ha",
  "has_deficit",
  "has_paresis"
)

# Reformat
patients <-
  patients %>%
  mutate(
    across(cols, ~ case_when(
      . == "N" ~ FALSE,
      . == "Y" ~ TRUE,
      nchar(.) > 0 ~ TRUE,
      .default = FALSE
    ))
  )
```

## Create new variables

Create the `is_poor_outcome` variable.

```{r}
patients <-
  patients %>%
  mutate(is_poor_outcome = modified_rankin_score_final >= 3) %>%
  relocate(is_poor_outcome, .after = is_good_outcome)
```

Create the `modified_rankin_score_final_minus_presentation` variable.

```{r}
patients <-
  patients %>%
  mutate(
    modified_rankin_score_final_minus_presentation =
      as.numeric(modified_rankin_score_final) -
        as.numeric(modified_rankin_score_presentation),
    modified_rankin_score_final_minus_pretx =
      as.numeric(modified_rankin_score_final) -
        as.numeric(modified_rankin_score_pretreatment),
  ) %>%
  relocate(
    modified_rankin_score_final_minus_presentation,
    modified_rankin_score_final_minus_pretx,
    .after = change_in_mrs_tx_vs_final
  )
```

## Finalize

Sort.

```{r}
patients <- patients %>% arrange(patient_id)
```

------------------------------------------------------------------------

# Quality control

decline mRS tx vs postop should be calculated

## Generate summary

Generate summary to identify data issues.

```{r}
# Rename dataframe
`Pediatric AVMs` <-
  patients %>%
  filter(is_eligible) %>%
  select(-is_eligible)

# Create summary
`Pediatric AVMs` %>%
  summarytools::dfSummary(display.labels = FALSE) %>%
  print(
    file =
      "../../outputs/descriptive-statistics/descriptive_statistics_after.html",
    footnote = NA
  )

# Remove unwanted dataframe
remove(`Pediatric AVMs`)
```

------------------------------------------------------------------------

# Reproducibility

## Linting and styling

```{r, results="hide"}
# Style current file
styler::style_file(
  path = rstudioapi::getSourceEditorContext()$path,
  style = styler::tidyverse_style
)

# Lint current file
lintr::lint(rstudioapi::getSourceEditorContext()$path)
```

## Dependency management

```{r, results="hide"}
# Clean up project of libraries not in use
# (use prompt = FALSE to avoid the interactive session)
# (packages can only be removed in interactive mode b/c this is destructive)
renv::clean(prompt = TRUE)

# Update lock file with new packages
renv::snapshot()
```

## Containerization

```{r, results="hide"}
# Only run this if option is set to TRUE
if (UPDATE_DOCKERFILE) {
  # Create a dockerfile from the session info
  my_dockerfile <- containerit::dockerfile(from = sessionInfo(), env = ls())
  # Write file
  write(my_dockerfile, file = "~/Dockerfile")
  print(my_dockerfile)
}
```

------------------------------------------------------------------------

# Write

```{r, results="hold"}
# Create name
today <- format(Sys.Date(), "%Y-%m-%d")
basename <- paste0("patients-daily_", today, ".csv")
filepath <- file.path(DST_DIRNAME_DATA, params$DST_DIRNAME, basename)

# Write as CSV
readr::write_csv(patients, filepath)

# Print filepath
print(filepath)
```

------------------------------------------------------------------------

# Documentation {.tabset}

## Session Info

```{r session_info, echo=FALSE}
print(sessionInfo(), locale = FALSE)
```

## References

```{r refs, echo=FALSE}
(.packages()) %>%
  sort() %>%
  lapply(citation) %>%
  lapply(c) %>%
  unique()
```
